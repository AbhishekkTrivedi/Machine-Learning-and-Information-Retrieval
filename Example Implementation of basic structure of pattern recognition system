#here we are taking 10 character with 5 features i.e no. of tilted lines, no. of horizontal lines, no. of vertical lines no. of half or small semi-circles and no. of complete or big semi-circles



#importing libraries 

import math
import sys

#defining a class to make a data structure for features of the character

class data:
    def __init__(self,charac,tiltline,horline,verline,halfsemi,compsemi):
        self.charac=charac
        self.tiltline=tiltline
        self.horline=horline
        self.verline=verline
        self.halfsemi=halfsemi
        self.compsemi=compsemi
        
#creating dataset of our training data containing feature values for characters A to J

traindata=[]
traindata.append(data('A',2,1,0,0,0))
traindata.append(data('B',0,0,1,2,0))
traindata.append(data('C',0,0,0,0,1))
traindata.append(data('D',0,0,1,0,1))
traindata.append(data('E',0,3,1,0,0))
traindata.append(data('F',0,2,1,0,0))
traindata.append(data('G',0,1,2,0,1))
traindata.append(data('H',0,1,2,0,0))
traindata.append(data('I',0,2,1,0,0))
traindata.append(data('J',0,1,1,1,0))

#we create a test data which is input from the user where we input the features of the character to be predicted 

testdata=[]
def inserttest():
    val=list(input("Enter character and features of the testcase\n"))
    if(len(val)!=6):
        print("Enter correct features and try again")
        quit()
    testdata.append(data(val[0],int(val[1]),int(val[2]),int(val[3]),int(val[4]),int(val[5])))

#we calculate the Euclidean distance of the given character features to all the trained data features

ans=[]
def caleucliddist():
    for i in range (0,10):
        temp=abs(traindata[i].tiltline-testdata[0].tiltline)**2
        temp+=abs(traindata[i].horline-testdata[0].horline)**2
        temp+=abs(traindata[i].verline-testdata[0].verline)**2
        temp+=abs(traindata[i].halfsemi-testdata[0].halfsemi)**2
        temp+=abs(traindata[i].compsemi-testdata[0].compsemi)**2
        ans.append(math.sqrt(temp))

#we calculate the minimum Euclidean distance so that we can find the predicted character is close to 
#which trained character.

def predict():
    curr_min = sys.maxsize
    for i in ans:
        curr_min=min(i,curr_min)
    
    print("\nActual Character: \n"+testdata[0].charac)
    print("\nCharacter recoganised as: ")
    for i in range(10):
        if(ans[i]==curr_min):
            print(traindata[i].charac)

#main function

def main():
    inserttest()
    caleucliddist()
    predict()

if __name__=="__main__":
   main()
